rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users - Authenticated users can read all, but only write to their own data or admins can write any
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write, create, update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Orders - Users can read their own orders, admins can read all
    match /orders/{orderId} {
      // Allow reading: authenticated users can read their own orders, admins can read all, or if no user_id (guest orders)
      allow read: if (request.auth != null && isAdmin()) || 
                     (request.auth != null && resource.data.user_id == request.auth.uid) ||
                     (resource.data.user_id == null);
      
      // Allow listing orders for authenticated users (their own) or admins (all)
      allow list: if request.auth != null && isAdmin();
      
      // Allow creation: anyone can create orders (including guests)
      allow create: if true;
      
      // Only admins can update or delete orders
      allow update, delete: if request.auth != null && isAdmin();
    }
    
    // AFFILIATE COLLECTIONS - Completely open permissions for debugging
    match /affiliate_referrals/{referralId} {
      allow read, write, create, update, delete: if true;
    }
    
    match /affiliate_commissions/{commissionId} {
      allow read, write, create, update, delete: if true;
    }
    
    match /affiliate_settings/{settingId} {
      allow read, write, create, update, delete: if true;
    }

    match /affiliate_payouts/{payoutId} {
      allow read, write, create, update, delete: if true;
    }
    
    match /affiliates/{affiliateId} {
      allow read, write, create, update, delete: if true;
    }
    
    // SHOPEE-STYLE AFFILIATE SYSTEM - Collections for attribution tracking
    match /affiliateAttribution/{attributionId} {
      allow read, write, create, update, delete: if true;
    }
    
    match /affiliateOrders/{orderId} {
      allow read, write, create, update, delete: if true;
    }
    
    match /shopee_affiliates/{affiliateId} {
      allow read, write, create, update, delete: if true;
    }
    
    match /shopee_affiliate_payouts/{payoutId} {
      allow read, write, create, update, delete: if true;
    }
    
    match /shopee_affiliate_settings/{settingId} {
      allow read, write, create, update, delete: if true;
    }
    
    // Admin-only collections
    match /recycle_bin/{itemId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    match /admin_logs/{logId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Shipping rates - Public read, admin write
    match /shipping_rates/{rateId} {
      allow read: if true;
      allow write, create, update, delete: if request.auth != null && isAdmin();
    }

    // Payment proofs - Anyone can create (for guest checkout), users can read their own, admins can manage all
    match /payment_proofs/{paymentProofId} {
      allow read: if (request.auth != null && isAdmin()) || 
                     (request.auth != null && resource.data.user_id == request.auth.uid) ||
                     (resource.data.user_id == null); // Allow reading payment proofs without user_id
      allow create: if true; // Allow anyone to create payment proofs (including guests)
      allow update, delete: if request.auth != null && isAdmin();
    }
    
    // Categories - Public read, admin write
    match /categories/{categoryId} {
      allow read, list: if true;
      allow write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // BUNDLE COLLECTIONS - Enhanced rules for bundle system
    // Bundles - Public read, admin write
    match /bundles/{bundleId} {
      allow read, list: if true;
      allow write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Bundle Items - Public read, admin write
    match /bundle_items/{itemId} {
      allow read, list: if true;
      allow write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Bundle Categories - Public read, admin write
    match /bundle_categories/{categoryId} {
      allow read, list: if true;
      allow write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Bundle Analytics - Admin only
    match /bundle_analytics/{analyticsId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Bundle Recommendations - Public read, admin write
    match /bundle_recommendations/{recommendationId} {
      allow read, list: if true;
      allow write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Customer Bundle Preferences - Users can manage their own, admin can read all
    match /customer_bundle_preferences/{preferenceId} {
      allow read: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.user_id);
      allow create, update: if request.auth != null && request.auth.uid == request.resource.data.user_id;
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Financial data - Admin only
    match /pos_transactions/{transactionId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    match /financial_transactions/{transactionId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    match /daily_sales/{dateId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    match /monthly_financial_data/{monthId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // COD settings - Public read, admin write
    match /cod_settings/{documentId} {
      allow read: if true;
      allow write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Banners - Public read for active banners, admin write
    match /banners/{bannerId} {
      allow read: if true;
      allow list: if true;
      allow write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Addresses - Users can manage their own addresses
    match /addresses/{addressId} {
      allow read, list: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // COUPON COLLECTIONS - Coupon management system
    // Coupons - Public read for active coupons, admin full access
    match /coupons/{couponId} {
      allow read, list: if true; // Public can read coupons for validation
      allow write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Coupon Usage - Users can read their own usage, admin full access
    match /couponUsage/{usageId} {
      allow read, list: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.userId);
      allow create: if request.auth != null; // Users can create usage records when applying coupons
      allow update, delete: if request.auth != null && isAdmin();
    }
    
    // ANALYTICS COLLECTIONS - Traffic and website analytics
    // Analytics - Admin only access for viewing traffic data
    match /analytics/{analyticsId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Website Traffic - Admin only access
    match /website_traffic/{trafficId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Page Views - Admin only access
    match /page_views/{viewId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // BANK INFORMATION MANAGEMENT
    // Admin Bank Information - Admin only access for system-wide bank accounts (old collection)
    match /bank_accounts/{accountId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // New Admin Bank Information - Admin only access for system-wide bank accounts (new collection)
    match /admin_bank_accounts/{accountId} {
      allow read, list, write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // User Bank Information - Users can manage their own bank accounts for affiliate payouts
    match /user_bank_accounts/{accountId} {
      // Users can read/write their own bank accounts, admins can access all
      allow read, list: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.userId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.userId);
      allow delete: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.userId);
    }
    
    // COMMON COLLECTIONS - Rules for basic app functionality
    // Products - Public read, admin write
    match /products/{productId} {
      allow read, list: if true; // Public can view products
      allow write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // App Settings - Public read for basic settings, admin write
    match /app_settings/{settingId} {
      allow read: if true;
      allow write, create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Validate order creation with proper data requirements
    function validateOrderCreation() {
      return request.resource.data.keys().hasAll(['items', 'total_amount', 'shipping_address', 'payment_method']) &&
             request.resource.data.items is list &&
             request.resource.data.items.size() > 0 &&
             request.resource.data.total_amount is number &&
             request.resource.data.total_amount > 0;
    }
    
  }
}